apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: simple-vsi-app-pipeline
spec:
  params:
    - name: repository
      description: The Git Repository for the Application Source Code. If empty, the Repository url will be found from toolchain
    - name: branch
      description: The Branch for the Application Source Code
      default: "master"
    - name: revision
      description: The Revision for the Application Source Code
      default: ""
    - name: git-token
      description: access token for the git repo
    - name: region
      description: The IBM Cloud Region in which Virtual Server Instance is running
    - name: api
      description: The IBM Cloud API Endpoint
    - name: apikey
      description: The IBM Cloud API Key
    - name: strict
      description: (Optional) Enables strict mode for scanning
      default: "false"
    - name: app-name
      description: The name of the application passed as environment variable
    - name: pipeline-debug
      default: "0"
    - name: artifactory
      description: The variable storing artifactory integration with the toolchain
    - name: cos-bucket-name
      description: The Cloud Object Storage Bucket name where build artifact will be stored
    - name: inventory-repo
      description: The variable storing git integration for the repository storing build inventory with the toolchain
    - name: scripts-repo
      description: The variable storing git integration for the repository storing build application code for the toolchain      

    - name: cos-api-key
      description: The API Key to interact with the Cloud Object Storage Instance
    - name: insights
      description: The variable storing DevOps Insight integration with the toolchain
    - name: scripts-subpath
      description: TThe subpath to the scripts repo from root
    - name: scripts-repo-branch
      description: The branch of the scripts-repo
    - name: inventory-repo-branch
      description: The branch of the inventory-repo   

    - name: toolchain-build-image
      description: Image to use for `build` task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.29"
    - name: tester-unit-tests-image
      description: Image to use for `unit-test` task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.29"
    - name: tester-code-coverage-image
      description: Image to use for `code-coverage` task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.29"

  workspaces:
    - name: pipeline-ws
  tasks:
    - name: git-clone-application-repo
      taskRef:
        name: git-clone-repo
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "apikey"
        - name: git-access-token
          value: $(params.git-token)
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
        - name: revision
          value: $(params.revision)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: git-credentials-json-file
          value: credentials.json          
      workspaces:
        - name: output
          workspace: pipeline-ws 
    - name: git-clone-scripts-repo
      taskRef:
        name: git-clone-repo
      runAfter:
        - git-clone-application-repo       
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "apikey"
        - name: repository
          value: $(params.scripts-repo)
        - name: branch
          value: $(params.scripts-repo-branch) 
        - name: revision
          value: $(params.scripts-repo-branch) 
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: git-credentials-json-file
          value: credentials.json          
      workspaces:
        - name: output
          workspace: pipeline-ws
          subpath: scripts-repo    
    - name: build-source
      runAfter:
        - git-clone-scripts-repo
      taskRef:
        name: toolchain-build
      params:
        - name: run-build-image
          value: $(params.toolchain-build-image)
        - name: custom-script
          value: |
            #!/bin/bash
            # Your build script should go here.
            # Existing template utilizes a Maven Based Java Application and hence the build steps utilizes maven mvn wrapper to build the Java Archive
            # In case your application is Java/Go based where the deployment unit comprises of a binary you may need to modify the lines below to cater
            # to the needs of your build system. For interpreter based project (Python/JS), where the application needs only the source code, you may
            # skip this step or comment out the existing lines and move over to copy the contents to /artifacts/binaries folder.            
            echo "Running Application Source Code Build Script"
            subpath="$(params.scripts-subpath)"
            source ./scripts-repo/${subpath}/build.sh
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: code-risk-analyzer
      runAfter:
        - build-source
      taskRef:
        name: cra-v2-cra
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: strict
          value: $(params.strict)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: unit-tests
      taskRef:
        name: tester-run-tests
      runAfter: 
        - build-source
      params: 
        - name: tests-image
          value: $(params.tester-unit-tests-image)
        - name: tests-script
          value: |
            #!/bin/bash            
            echo "Running Unit Test Script"
            subpath="$(params.scripts-subpath)"
            source ./scripts-repo/${subpath}/unit-tests.sh

            # Publish the results of the unit tests as result of this task.
            # This result helps the downstream task (for eg. DevOps Insight) to ingest the result.
            echo $UNIT_TEST_RESULTS_LOC 
            echo -n $UNIT_TEST_RESULTS_LOC > $(results.test-result-file-paths.path)
            echo -n unittest > $(results.test-types.path)        
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: code-coverage
      runAfter: 
        - unit-tests
      taskRef:
        name: tester-run-tests
      params:
        - name: tests-image
          value: $(params.tester-code-coverage-image)
        - name: tests-script
          value: |
            #!/bin/bash            
            echo "Running Code Coverage Script"
            subpath="$(params.scripts-subpath)"
            source ./scripts-repo/${subpath}/code-coverage.sh
            # Publish the results of the code coverage as result of this task.
            # This result helps the downstream task (for eg. DevOps Insight) to ingest the result.
            echo $CODE_COVERAGE_RESULTS_LOC
            echo -n $CODE_COVERAGE_RESULTS_LOC > $(results.test-result-file-paths.path)
            echo -n code > $(results.test-types.path)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: package-build-artifacts
      runAfter:
        - code-coverage
      taskRef:
        name: toolchain-build
      params:
        - name: custom-script
          value: |
            #!/bin/bash
            subpath="$(params.scripts-subpath)"
            source ./scripts-repo/${subpath}/package-build.sh
      workspaces:
        - name: output
          workspace: pipeline-ws         
    - name: build-artifacts-info
      runAfter: 
        - package-build-artifacts
      taskRef:
        name: build-artifacts-info
      params:
        - name: repository
          value: $(params.repository)
        - name: appname
          value: $(params.app-name)
        - name: scripts-subpath
          value: $(params.scripts-subpath)                            
      workspaces:
        - name: output
          workspace: pipeline-ws      
    - name: publish-doi-buildrecord
      runAfter: 
        - build-artifacts-info
      when:
        - input: $(params.insights)
          operator: in
          values: ["draservicebroker"]
      taskRef:
        name: doi-publish-buildrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "apikey"
        - name: app-name
          value: $(params.app-name)
        - name: git-repository
          value: $(tasks.git-clone-application-repo.results.git-repository)
        - name: git-branch
          value: $(tasks.git-clone-application-repo.results.git-branch)
        - name: git-commit
          value: $(tasks.git-clone-application-repo.results.git-commit)
    - name: publish-doi-code-tests
      runAfter: 
        - unit-tests
      when:
        - input: $(params.insights)
          operator: in
          values: ["draservicebroker"]
      taskRef:
        name: doi-publish-testrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "apikey"
        - name: build-number
          value: "$(tasks.publish-doi-buildrecord.results.build-number)"
        - name: app-name
          value: $(params.app-name)
        - name: file-locations
          value: "$(tasks.unit-tests.results.test-result-file-paths)"
        - name: test-types
          value: "$(tasks.unit-tests.results.test-types)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: publish-doi-code-coverage-tests
      runAfter: 
        - code-coverage
      when:
        - input: $(params.insights)
          operator: in
          values: ["draservicebroker"]
      taskRef:
        name: doi-publish-testrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "apikey"
        - name: build-number
          value: "$(tasks.publish-doi-buildrecord.results.build-number)"
        - name: app-name
          value: $(params.app-name)
        - name: file-locations
          value: "$(tasks.code-coverage.results.test-result-file-paths)"
        - name: test-types
          value: "$(tasks.code-coverage.results.test-types)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: evaluate-gate-task 
      runAfter: 
        - publish-doi-code-tests
        - publish-doi-code-coverage-tests
      when:
        - input: $(params.insights)
          operator: in
          values: ["draservicebroker"]        
      taskRef:
        name: doi-evaluate-gate
      params:
        - name: toolchain-apikey-secret-key
          value: "apikey"
        - name: build-number
          value: "$(tasks.publish-doi-buildrecord.results.build-number)"
        - name: app-name
          value: $(params.app-name)
        - name: policy
          value: "Policy to check Unit Tests and code coverage"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: upload-artifacts
      runAfter: 
        - build-artifacts-info
        - unit-tests
      taskRef:
        name: upload-artifacts
      params:
        - name: region
          value: $(params.region)
        - name: api
          value: $(params.api)
        - name: apikey
          value: $(params.apikey)
        - name: cos-bucket-name
          value: $(params.cos-bucket-name)
        - name: artifactory
          value: $(params.artifactory)
        - name: objectname
          value: $(tasks.build-artifacts-info.results.objectname)
        - name: cos-api-key
          value: $(params.cos-api-key)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: git-clone-inventory-repo
      runAfter: 
        - build-artifacts-info
        - unit-tests
      taskRef:
        name: git-clone-repo
      params:
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "apikey"
        - name: repository
          value: $(params.inventory-repo)
        - name: branch
          value: $(params.inventory-repo-branch) 
        - name: revision
          value: $(params.inventory-repo-branch) 
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: git-credentials-json-file
          value: credentials.json
      workspaces:
        - name: output
          workspace: pipeline-ws
          subpath: inventory-repo
    - name: git-commit-inventory-repo
      runAfter: 
        - git-clone-inventory-repo
        - upload-artifacts
      taskRef:
        name: git-commit-inventory-repo-task
      params:
        - name: repository
          value: $(tasks.git-clone-inventory-repo.results.git-repository)
        - name: appname
          value: $(params.app-name)       
        - name: commitid
          value: $(tasks.git-clone-inventory-repo.results.git-commit)
        - name: artifact
          value: $(tasks.build-artifacts-info.results.objectname)
        - name: checksum
          value: $(tasks.build-artifacts-info.results.checksum)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
        - name: output
          workspace: pipeline-ws
          subpath: inventory-repo
